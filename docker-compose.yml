version: '3.8'

services:
  langflowai:
    # Voltamos a usar 'build' para criar nossa imagem com o script de espera
    build:
      context: .
      dockerfile: Dockerfile.langflow
    restart: unless-stopped
    # O comando agora chama o script, que por sua vez chama o uvicorn
    command: ["wait-for-postgres.sh", "postgres", "uvicorn", "langflow.main:create_app", "--host", "0.0.0.0", "--port", "7860", "--workers", "4"]
    environment:
      # As variáveis de ambiente continuam as mesmas
      - LANGFLOW_NEW_USER_IS_ACTIVE=true
      - LANGFLOW_SUPERUSER=${LANGFLOW_SUPERUSER}
      - LANGFLOW_SUPERUSER_PASSWORD=${LANGFLOW_SUPERUSER_PASSWORD}
      - TZ=America/Sao_Paulo
      - LANGFLOW_DATABASE_URL=${LANGFLOW_DATABASE_URL}
      - LANGFLOW_CACHE_TYPE=redis
      - LANGFLOW_REDIS_URL=${LANGFLOW_REDIS_URL}
      - AWS_S3_ENDPOINT_URL=${AWS_S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION=auto
      # Adicionamos a variável do usuário do postgres aqui para o script de espera usar
      - POSTGRES_USER=${POSTGRES_USER}
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - TZ=America/Sao_Paulo
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped

volumes:
  postgres_data: {}
